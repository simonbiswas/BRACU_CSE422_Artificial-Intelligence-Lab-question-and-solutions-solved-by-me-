# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.


"""

from google.colab import files
    load_data = files.upload()

import numpy as np
    import pandas as pd
    import io
    import sklearn
    from sklearn.preprocessing import LabelEncoder
    from sklearn.preprocessing import MinMaxScaler
    from sklearn.model_selection import train_test_split
    from sklearn.neighbors import KNeighborsClassifier
    
    #loading data 
    dataset = pd.read_csv(io.BytesIO(load_data['mushroom edibility classification dataset.csv']))
    dataset.shape

# missing values
    dataset.drop(dataset.columns[dataset.columns.str.contains('unnamed',case = False)],axis = 1, inplace = True)
    dataset.head()

print(dataset.isnull().sum())
dataset=dataset.dropna(how = 'any', axis = 0)
dataset.shape
dataset = dataset.dropna(axis = 0, subset = ['cap-shape', 'cap-color'])
print(dataset.isnull().sum())
dataset.shape
print('**********')
print(dataset.info())

#encoding categorical features
  print(dataset['class'].unique())
  print(dataset['bruises'].unique())

from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import MinMaxScaler

enc = LabelEncoder()
dataset['class'] = enc.fit_transform(dataset['class'])
dataset['bruises'] = enc.fit_transform(dataset['bruises'])
dataset[['class', 'bruises']].head()

scaler = MinMaxScaler()
scaler.fit(dataset)
dataset_train_scaled = scaler.transform(dataset)
print('per-feature minimum before scaling:\n{}'.format(dataset.min(axis = 0)))
print('per-feature maximum before scaling:\n{}'.format(dataset.max(axis = 0)))
print('per-feature minimum after scaling:\n{}'.format(dataset_train_scaled.min(axis = 0)))
print('per-feature maximum after scaling:\n{}'.format(dataset_train_scaled.max(axis = 0)))

#spliting the dataset into features and labels
features = dataset[['cap-shape', 'cap-surface', 'cap-color', 'bruises', 'odor', 'stalk-shape', 'stalk-root', 'stalk-surface-above-ring', 'stalk-surface-below-ring', 'stalk-color-above-ring', 'stalk-color-below-ring', 'veil-type', 'veil-color', 'ring-number', 'ring-type', 'spore-print-color', 'population', 'habitat']]
label = dataset[['class']]
stratified = pd.DataFrame(label)
xTrain, xTest, yTrain, yTest = train_test_split(features, label, test_size = 0.25, stratify = stratified, random_state = 0)

knn = KNeighborsClassifier()
knn.fit(xTrain, yTrain)
print("Test set accuracy: {:.2f}".format(knn.score(xTest, yTest)))

